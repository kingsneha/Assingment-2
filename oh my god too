#include <iostream>
#include <cmath>
#include <iomanip>
#include <string>
#include <sstream>

using namespace std;

/** RetirementAccount
 * Class for retirement planning and retirement savings calculations
 * @member D double the amount to deposit each period to save for retirement
 * @member m double the number of deposit periods per year (m=12)
 * @member r double the compound interest rate the retirement accounts will earn
 * @member t double the time in years to save for retirment
 */

class RetirementAccount {
private:
  double D, m, r, t;
public:
  RetirementAccount()
  {
    D = 1.0;
    m = 1.0;
    r = 1.0;
    t = 1.0;
  }

  RetirementAccount(double DepositAmt, double DepPerYr, double Irate, double time)
  {
    D = DepositAmt;
    m = DepPerYr;
    r = Irate;
    t = time;
  }

  void set_D(double Deposit)
  {
    D = Deposit;
  }
  void set_m(double Dperyr)
  {
    m = Dperyr;
  }
  void set_r(double Itrate)
  {
    r = Itrate;
  }
  void set_t(double savingTime)
  {
    t = savingTime;
  }
  double get_D()
  {
    return D;
  }
  double get_m()
  {
    return m;
  }
  double get_r()
  {
    return r;
  }
  double get_t()
  {
    return t;
  }

  string tostring()
  {
    string str = "";
    cout << " D (deposit amount) = $" << fixed << setprecision(2) << D << endl;
    cout << " m (periods per year) = " << fixed << setprecision(2) << m << endl;
    cout << " r (interest rate) = " << fixed << setprecision(4) << r << endl;
    cout << " t (time in years) = " << fixed << setprecision(2) << t << endl;
    return str;
  }

  /** calculateRetirmentSavings
   * calculating the total amount of savings earned in retirement account
   * using D,m,r,t
   * @returns double the calculated total savings S at the end of the retirement plan
   *     is calculated and returned
   */

  double calculateRetirementSavings()
  {
    double p = pow((1 + r / m), m * t);
    double s = D * ((p - 1) / (r / m));
    return s;
  }

  /** planRetirmentDeopsits
   * Using S which is the retirment savings goal, determine the required monthly retirement
   * deposits D which are needed to reach that goal
   * @param S The savings goal in $US passed as a double value.
   * @returns double Returns the calculated retirement payments needed in $US
   */

  double planRetirementDeposits(double S)
  {
    double power = pow((1 + r / m), m * t);
    D = ((S * (r / m)) / (power - 1));
    return D;
  }
};

int main(int argc, char** argv)
{
  // test constructor
  cout << "=== Testing class creation using constructor..................." << endl << endl;
  RetirementAccount account(100.00, 10.0, 0.035, 22.0);

  // test getter methods
  cout << "=== Testing getter methods..................." << endl;
  cout << "Account: " << endl;
  cout << " D (deposit amount) = $" << fixed << setprecision(2) << account.get_D() << endl;
  cout << " m (periods per year) = " << fixed << setprecision(2) << account.get_m() << endl;
  cout << " r (interest rate) = " << fixed << setprecision(4) << account.get_r() << endl;
  cout << " t (time in years) = " << fixed << setprecision(2) << account.get_t() << endl;
  cout << endl;

  // test tostring()
  cout << "=== Testing tostring() method..................." << endl;
  cout << "Account: " << endl;
  cout << account.tostring() << endl;
  cout << endl;

  // test setter methods
  cout << "=== Testing setter methods..................." << endl;
  account.set_D(500.00);
  account.set_m(12.0);
  account.set_r(0.048);
  account.set_t(25.00);
  cout << "Account: " << endl;
  cout << account.tostring() << endl;

  // test retirement savings calculation
  cout << "=== Testing retirement savings calculations..................." << endl;
  cout << "My retirement savings: $"
    << fixed << setprecision(2)
    << account.calculateRetirementSavings() << endl;
  cout << endl;

  // test retirement planning calculations
  cout << "=== Testing retirement planning calculations..................." << endl;
  double newD = account.planRetirementDeposits(1000000.00);
  cout << "In order to save 1 million dollars, we need to make monthly deposits of $"
    << fixed << setprecision(2)
    << newD;
  cout << endl;

  account.set_D(newD);
  cout << "If we set our deposit to this new amount..." << endl;
  cout << "Account: " << endl;
  cout << account.tostring() << endl;
  cout << "My retirement savings: $"
    << fixed << setprecision(2)
    << account.calculateRetirementSavings() << endl;
  cout << endl;
  // an additional test of savings and planning calculations
  cout << "=== Second test on account2 of savings and planning..................." << endl;
  RetirementAccount account2(650.00, 9.0, 0.035, 30.0);
  cout << "Account 2:" << endl;
  cout << account2.tostring() << endl;
  cout << "My retirement savings: $" << fixed << setprecision(2) << account2.calculateRetirementSavings() << endl;
  cout << endl;

  newD = account2.planRetirementDeposits(2000000.00);
  cout << "In order to save 2 million dollars, we need to make deposits of $"
    << fixed << setprecision(2)
    << newD;
  cout << endl;

  account2.set_D(newD);
  cout << "If we set our deposit to this new amount..." << endl;
  cout << "Account: " << endl;
  cout << account2.tostring() << endl;
  cout << "My retirement savings: $"
    << fixed << setprecision(2)
    << account2.calculateRetirementSavings() << endl;
  cout << endl;


  // more tests, demonstrate using arrays of classes and looping over classes
  // create 10 RetirementAccount's to perform some comparison calculations
  cout << "=== Larger number of tests, compare effect of increasing monthly deposit amount..................."
    << endl;
  const int NUM_PLANS = 10;
  RetirementAccount plan[NUM_PLANS];

  // set all accounts with same interest rate, periods and time, but different
  // deposit amounts
  double D = 500.00; // base amount to deposit.
  double m = 12.0; // make monthly deposits
  double r = 0.04; // compound interest rate.
  double t = 30.0; // save for retirement for 30 years
  for (int i = 0; i < NUM_PLANS; i++)
  {
    plan[i].set_D(D + (i * 100.0));
    plan[i].set_m(m);
    plan[i].set_r(r);
    plan[i].set_t(t);

    cout << "Plan " << i << ":" << endl;
    cout << plan[i].tostring();
    cout << " Total Savings: "
      << fixed << setprecision(2)
      << plan[i].calculateRetirementSavings() << endl;
  }

  // return 0 to indicate successful completion
  return 0;
}
